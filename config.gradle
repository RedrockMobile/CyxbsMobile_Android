//除app外的所有组件的公有配置(包括lib和业务模块)
//如需要配置app，请前往app模块
modulesConfiguration{
    if (isSingleModuleDebug.toBoolean()) {
        apply plugin: 'com.android.application'
    } else {
        apply plugin: 'com.android.library'
    }
}

libsConfiguration {
    apply plugin: 'com.android.library'
}


apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion build_versions.compile_sdk
    buildToolsVersion build_versions.build_tools

    defaultConfig {
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        kapt {
            //Arouter
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
            }
        }

        multiDexEnabled true
    }
    //module模块独有配置
    modulesConfiguration {
        resourcePrefix "${project.getName().replaceAll("module_", "")}_"
        sourceSets {
            main {
                //debug时能独立执行Main模块的配置
                if (isSingleModuleDebug.toBoolean()) {
                    manifest.srcFile 'src/main/module/AndroidManifest.xml'
                } else {
                    manifest.srcFile 'src/main/AndroidManifest.xml'
                    java {
                        exclude 'debug/**'
                    }
                }
                // 让so文件放在libs文件夹中同样被打包，减少学弟踩坑
                jniLibs.srcDirs = ['libs']
            }
        }
    }
    //lib模块独有配置
    libsConfiguration {
        resourcePrefix "${project.getName().replaceAll("lib_", "")}_"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    buildFeatures {
        dataBinding true
    }
}

//lib模块独有配置
def libsConfiguration(Closure closure) {
    if (project.name.matches("lib_.+"))
        closure()
}
//module模块独有配置
def modulesConfiguration(Closure closure) {
    if (project.name.matches("module_.+")||project.name.matches(".+_impl"))
        closure()
}

// 需要直接依赖到每个模块的,kapt必须写到这里
// 如果确认始终只有一个模块会用，可以添加到模块自身的build.gradle
dependencies {
    if (project.name != "lib_common")
        implementation project(':lib_common')
    kapt deps.arouter.compiler
    kapt deps.room.compiler
    kapt deps.lifecycle.compiler
}